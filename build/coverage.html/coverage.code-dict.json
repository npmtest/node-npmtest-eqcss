{"/home/travis/build/npmtest/node-npmtest-eqcss/test.js":"/* istanbul instrument in package npmtest_eqcss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eqcss/lib.npmtest_eqcss.js":"/* istanbul instrument in package npmtest_eqcss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_eqcss = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_eqcss = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-eqcss/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-eqcss && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_eqcss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_eqcss\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_eqcss.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_eqcss.rollup.js'] =\n            local.assetsDict['/assets.npmtest_eqcss.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_eqcss.__dirname + '/lib.npmtest_eqcss.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eqcss/node_modules/eqcss/EQCSS.js":"/*\n\n#  EQCSS\n## version 1.6.0\n\nA JavaScript plugin to read EQCSS syntax to provide:\nscoped styles, element queries, container queries,\nmeta-selectors, eval(), and element-based units.\n\n- github.com/eqcss/eqcss\n- elementqueries.com\n\nAuthors: Tommy Hodgins, Maxime Euzière\n\nLicense: MIT\n\n*/\n\n// Uses Node, AMD or browser globals to create a module\n(function (root, factory) {\n\n  if (typeof define === 'function' && define.amd) {\n\n    // AMD: Register as an anonymous module\n    define([], factory);\n\n  } else if (typeof module === 'object' && module.exports) {\n\n    // Node: Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node\n    module.exports = factory();\n\n  } else {\n\n    // Browser globals (root is window)\n    root.EQCSS = factory();\n\n  }\n\n}(this, function() {\n\n    var EQCSS = {\n      data: []\n    }\n\n\n    /*\n     * EQCSS.load()\n     * Called automatically on page load.\n     * Call it manually after adding EQCSS code in the page.\n     * Loads and parses all the EQCSS code.\n     */\n\n    EQCSS.load = function() {\n\n      // Retrieve all style blocks\n      var styles = document.getElementsByTagName('style');\n\n      for (var i = 0; i < styles.length; i++) {\n\n        // Test if the style is not read yet\n        if (styles[i].getAttribute('data-eqcss-read') === null) {\n\n          // Mark the style block as read\n          styles[i].setAttribute('data-eqcss-read', 'true');\n\n          // Process\n          EQCSS.parse(styles[i].innerHTML);\n          EQCSS.apply();\n\n        }\n\n      }\n\n      // Retrieve all script blocks\n      var script = document.getElementsByTagName('script');\n\n      for (var i = 0; i < script.length; i++) {\n\n        // Test if the script is not read yet and has type='text/eqcss'\n        if (script[i].getAttribute('data-eqcss-read') === null && script[i].type === 'text/eqcss') {\n\n          // Test if they contain external EQCSS code\n          if (script[i].src) {\n\n            // retrieve the file content with AJAX and process it\n            (function() {\n\n              var xhr = new XMLHttpRequest;\n\n              xhr.open('GET', script[i].src, true);\n              xhr.send(null);\n              xhr.onload = function() {\n\n                EQCSS.parse(xhr.responseText);\n                EQCSS.apply();\n\n              }\n\n            })();\n\n          }\n\n          // or embedded EQCSS code\n          else {\n\n            // Process\n            EQCSS.parse(script[i].innerHTML);\n            EQCSS.apply();\n\n          }\n\n          // Mark the script block as read\n          script[i].setAttribute('data-eqcss-read', 'true');\n\n        }\n\n      }\n\n      // Retrieve all link tags\n      var link = document.getElementsByTagName('link');\n\n      for (i = 0; i < link.length; i++) {\n\n        // Test if the link is not read yet, and has rel=stylesheet\n        if (link[i].getAttribute('data-eqcss-read') === null && link[i].rel === 'stylesheet') {\n\n          // retrieve the file content with AJAX and process it\n          if (link[i].href) {\n\n            (function() {\n\n              var xhr = new XMLHttpRequest;\n\n              xhr.open('GET', link[i].href, true);\n              xhr.send(null);\n              xhr.onload = function() {\n\n                EQCSS.parse(xhr.responseText);\n                EQCSS.apply();\n\n              }\n\n            })();\n\n          }\n\n          // Mark the link as read\n          link[i].setAttribute('data-eqcss-read', 'true');\n\n        }\n\n      }\n\n    }\n\n\n    /*\n     * EQCSS.parse()\n     * Called by load for each script / style / link resource.\n     * Generates data for each Element Query found\n     */\n\n    EQCSS.parse = function(code) {\n\n      // Cleanup\n      code = code.replace(/\\s+/g, ' '); // reduce spaces and line breaks\n      code = code.replace(/\\/\\*[\\w\\W]*?\\*\\//g, ''); // remove comments\n      code = code.replace(/@element/g, '\\n@element'); // one element query per line\n      code = code.replace(/(@element.*?\\{([^}]*?\\{[^}]*?\\}[^}]*?)*\\}).*/g, '$1'); // Keep the queries only (discard regular css written around them)\n\n      // Parse\n\n      // For each query\n      code.replace(/(@element.*(?!@element))/g, function(string, query) {\n\n        // Create a data entry\n        var dataEntry = {};\n\n        // Extract the selector\n        query.replace(/(@element)\\s*(\".*?\"|'.*?'|.*?)\\s*(and\\s*\\(|{)/g, function(string, atrule, selector, extra) {\n\n          // Strip outer quotes if present\n          selector = selector.replace(/^\\s?['](.*)[']/, '$1');\n          selector = selector.replace(/^\\s?[\"](.*)[\"]/, '$1');\n\n          dataEntry.selector = selector;\n\n        })\n\n        // Extract the conditions (measure, value, unit)\n        dataEntry.conditions = [];\n        query.replace(/and ?\\( ?([^:]*) ?: ?([^)]*) ?\\)/g, function(string, measure, value) {\n\n          // Separate value and unit if it's possible\n          var unit = null;\n          unit = value.replace(/^(\\d*\\.?\\d+)(\\D+)$/, '$2');\n\n          if (unit === value) {\n\n            unit = null;\n\n          }\n\n          value = value.replace(/^(\\d*\\.?\\d+)\\D+$/, '$1');\n          dataEntry.conditions.push({measure: measure, value: value, unit: unit});\n\n        });\n\n        // Extract the styles\n        query.replace(/{(.*)}/g, function(string, style) {\n\n          dataEntry.style = style;\n\n        });\n\n        // Add it to data\n        EQCSS.data.push(dataEntry);\n\n      });\n\n    }\n\n\n    /*\n     * EQCSS.apply()\n     * Called on load, on resize and manually on DOM update\n     * Enable the Element Queries in which the conditions are true\n     */\n\n    EQCSS.apply = function() {\n\n      var i, j, k;                      // Iterators\n      var elements;                     // Elements targeted by each query\n      var element_guid;                 // GUID for current element\n      var css_block;                    // CSS block corresponding to each targeted element\n      var element_guid_parent;          // GUID for current element's parent\n      var element_guid_prev;            // GUID for current element's previous sibling element\n      var element_guid_next;            // GUID for current element's next sibling element\n      var css_code;                     // CSS code to write in each CSS block (one per targeted element)\n      var element_width, parent_width;  // Computed widths\n      var element_height, parent_height;// Computed heights\n      var element_line_height;          // Computed line-height\n      var test;                         // Query's condition test result\n      var computed_style;               // Each targeted element's computed style\n      var parent_computed_style;        // Each targeted element parent's computed style\n\n      // Loop on all element queries\n      for (i = 0; i < EQCSS.data.length; i++) {\n\n        // Find all the elements targeted by the query\n        elements = document.querySelectorAll(EQCSS.data[i].selector);\n\n        // Loop on all the elements\n        for (j = 0; j < elements.length; j++) {\n\n          // Create a guid for this element\n          // Pattern: 'EQCSS_{element-query-index}_{matched-element-index}'\n          element_guid = 'data-eqcss-' + i + '-' + j;\n\n          // Add this guid as an attribute to the element\n          elements[j].setAttribute(element_guid, '');\n\n          // Create a guid for the parent of this element\n          // Pattern: 'EQCSS_{element-query-index}_{matched-element-index}_parent'\n          element_guid_parent = 'data-eqcss-' + i + '-' + j + '-parent';\n\n          // Add this guid as an attribute to the element's parent (except if element is the root element)\n          if (elements[j] != document.documentElement) {\n\n            elements[j].parentNode.setAttribute(element_guid_parent, '');\n\n          }\n\n          // Create a guid for the prev sibling of this element\n          // Pattern: 'EQCSS_{element-query-index}_{matched-element-index}_prev'\n          element_guid_prev = 'data-eqcss-' + i + '-' + j + '-prev';\n\n          // Add this guid as an attribute to the element's prev sibling\n          if (elements[j].previousElementSibling) {\n\n            elements[j].previousElementSibling.setAttribute(element_guid_prev, '');\n\n          }\n\n          // Create a guid for the next sibling of this element\n          // Pattern: 'EQCSS_{element-query-index}_{matched-element-index}_next'\n          element_guid_next = 'data-eqcss-' + i + '-' + j + '-next';\n\n          // Add this guid as an attribute to the element's next sibling\n          if (elements[j].nextElementSibling) {\n\n            elements[j].nextElementSibling.setAttribute(element_guid_next, '');\n\n          }\n\n          // Get the CSS block associated to this element (or create one in the <HEAD> if it doesn't exist)\n          css_block = document.querySelector('#' + element_guid);\n\n          if (!css_block) {\n\n            css_block = document.createElement('style');\n            css_block.id = element_guid;\n            css_block.setAttribute('data-eqcss-read', 'true');\n            document.querySelector('head').appendChild(css_block);\n\n          }\n\n          css_block = document.querySelector('#' + element_guid);\n\n          // Reset the query test's result (first, we assume that the selector is matched)\n          test = true;\n\n          // Loop on the conditions\n          test_conditions: for (k = 0; k < EQCSS.data[i].conditions.length; k++) {\n\n            // Reuse element and parent's computed style instead of computing it everywhere\n            computed_style = window.getComputedStyle(elements[j], null);\n\n            parent_computed_style = null;\n\n            if (elements[j] != document.documentElement) {\n\n              parent_computed_style = window.getComputedStyle(elements[j].parentNode, null);\n\n            }\n\n            // Do we have to reconvert the size in px at each call?\n            // This is true only for vw/vh/vmin/vmax\n            var recomputed = false;\n\n            // If the condition's unit is vw, convert current value in vw, in px\n            if (EQCSS.data[i].conditions[k].unit === 'vw') {\n\n              recomputed = true;\n\n              var value = parseInt(EQCSS.data[i].conditions[k].value);\n              EQCSS.data[i].conditions[k].recomputed_value = value * window.innerWidth / 100;\n\n            }\n\n            // If the condition's unit is vh, convert current value in vh, in px\n            else if (EQCSS.data[i].conditions[k].unit === 'vh') {\n\n              recomputed = true;\n\n              var value = parseInt(EQCSS.data[i].conditions[k].value);\n              EQCSS.data[i].conditions[k].recomputed_value = value * window.innerHeight / 100;\n\n            }\n\n            // If the condition's unit is vmin, convert current value in vmin, in px\n            else if (EQCSS.data[i].conditions[k].unit === 'vmin') {\n\n              recomputed = true;\n\n              var value = parseInt(EQCSS.data[i].conditions[k].value);\n              EQCSS.data[i].conditions[k].recomputed_value = value * Math.min(window.innerWidth, window.innerHeight) / 100;\n\n            }\n\n            // If the condition's unit is vmax, convert current value in vmax, in px\n            else if (EQCSS.data[i].conditions[k].unit === 'vmax') {\n\n              recomputed = true;\n\n              var value = parseInt(EQCSS.data[i].conditions[k].value);\n              EQCSS.data[i].conditions[k].recomputed_value = value * Math.max(window.innerWidth, window.innerHeight) / 100;\n\n            }\n\n            // If the condition's unit is set and is not px or %, convert it into pixels\n            else if (EQCSS.data[i].conditions[k].unit != null && EQCSS.data[i].conditions[k].unit != 'px' && EQCSS.data[i].conditions[k].unit != '%') {\n\n              // Create a hidden DIV, sibling of the current element (or its child, if the element is <html>)\n              // Set the given measure and unit to the DIV's width\n              // Measure the DIV's width in px\n              // Remove the DIV\n              var div = document.createElement('div');\n\n              div.style.visibility = 'hidden';\n              div.style.border = '1px solid red';\n              div.style.width = EQCSS.data[i].conditions[k].value + EQCSS.data[i].conditions[k].unit;\n\n              var position = elements[j];\n\n              if (elements[j] != document.documentElement) {\n\n                position = elements[j].parentNode;\n\n              }\n\n              position.appendChild(div);\n              EQCSS.data[i].conditions[k].value = parseInt(window.getComputedStyle(div, null).getPropertyValue('width'));\n              EQCSS.data[i].conditions[k].unit = 'px';\n              position.removeChild(div);\n\n            }\n\n            // Store the good value in final_value depending if the size is recomputed or not\n            var final_value = recomputed ? EQCSS.data[i].conditions[k].recomputed_value : parseInt(EQCSS.data[i].conditions[k].value);\n\n            // Check each condition for this query and this element\n            // If at least one condition is false, the element selector is not matched\n            switch (EQCSS.data[i].conditions[k].measure) {\n\n              // Min-width\n              case 'min-width':\n\n                // Min-width in px\n                if (recomputed === true || EQCSS.data[i].conditions[k].unit === 'px') {\n\n                  element_width = parseInt(computed_style.getPropertyValue('width'));\n\n                  if (!(element_width >= final_value)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n                // Min-width in %\n                if (EQCSS.data[i].conditions[k].unit === '%') {\n\n                  element_width = parseInt(computed_style.getPropertyValue('width'));\n                  parent_width = parseInt(parent_computed_style.getPropertyValue('width'));\n\n                  if (!(parent_width / element_width <= 100 / final_value)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n              break;\n\n              // Max-width\n              case 'max-width':\n\n                // Max-width in px\n                if (recomputed === true || EQCSS.data[i].conditions[k].unit === 'px') {\n\n                  element_width = parseInt(computed_style.getPropertyValue('width'));\n\n                  if (!(element_width <= final_value)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n                // Max-width in %\n                if (EQCSS.data[i].conditions[k].unit === '%') {\n\n                  element_width = parseInt(computed_style.getPropertyValue('width'));\n                  parent_width = parseInt(parent_computed_style.getPropertyValue('width'));\n\n                  if (!(parent_width / element_width >= 100 / final_value)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n              break;\n\n              // Min-height\n              case 'min-height':\n\n                // Min-height in px\n                if (recomputed === true || EQCSS.data[i].conditions[k].unit === 'px') {\n\n                  element_height = parseInt(computed_style.getPropertyValue('height'));\n\n                  if (!(element_height >= final_value)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n                // Min-height in %\n                if (EQCSS.data[i].conditions[k].unit === '%') {\n\n                  element_height = parseInt(computed_style.getPropertyValue('height'));\n                  parent_height = parseInt(parent_computed_style.getPropertyValue('height'));\n\n                  if (!(parent_height / element_height <= 100 / final_value)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n              break;\n\n              // Max-height\n              case 'max-height':\n\n                // Max-height in px\n                if (recomputed === true || EQCSS.data[i].conditions[k].unit === 'px') {\n\n                  element_height = parseInt(computed_style.getPropertyValue('height'));\n\n                  if (!(element_height <= final_value)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n                // Max-height in %\n                if (EQCSS.data[i].conditions[k].unit === '%') {\n\n                  element_height = parseInt(computed_style.getPropertyValue('height'));\n                  parent_height = parseInt(parent_computed_style.getPropertyValue('height'));\n\n                  if (!(parent_height / element_height >= 100 / final_value)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n              break;\n\n              // Min-scroll-x\n              case 'min-scroll-x':\n\n                var element = elements[j];\n                var element_scroll = element.scrollLeft;\n\n                if (!element.hasScrollListener) {\n\n                  if (element === document.documentElement || element === document.body) {\n\n                    window.addEventListener('scroll', function() {\n\n                      EQCSS.throttle();\n                      element.hasScrollListener = true;\n\n                    })\n\n                  } else {\n\n                    element.addEventListener('scroll', function() {\n\n                      EQCSS.throttle();\n                      element.hasScrollListener = true;\n\n                    })\n\n                  }\n\n                }\n\n                // Min-scroll-x in px\n                if (recomputed === true || EQCSS.data[i].conditions[k].unit === 'px') {\n\n                  if (!(element_scroll >= final_value)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n                // Min-scroll-x in %\n                else if (EQCSS.data[i].conditions[k].unit === '%') {\n\n                  var element_scroll_size = elements[j].scrollWidth;\n                  var element_size;\n\n                  if (elements[j] === document.documentElement || elements[j] === document.body) {\n\n                    element_size = window.innerWidth;\n\n                  } else {\n\n                    element_size = parseInt(computed_style.getPropertyValue('width'));\n\n                  }\n\n                  if (!((element_scroll / (element_scroll_size - element_size)) * 100 >= final_value)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n              break;\n\n              // Min-scroll-y\n              case 'min-scroll-y':\n\n                var element = elements[j];\n                element_scroll = elements[j].scrollTop;\n\n                if (!element.hasScrollListener) {\n\n                  if (element === document.documentElement || element === document.body) {\n\n                    window.addEventListener('scroll', function() {\n\n                      EQCSS.throttle();\n                      element.hasScrollListener = true;\n\n                    })\n\n                  } else {\n\n                    element.addEventListener('scroll', function() {\n\n                      EQCSS.throttle();\n                      element.hasScrollListener = true;\n\n                    })\n\n                  }\n\n                }\n\n                // Min-scroll-y in px\n                if (recomputed === true || EQCSS.data[i].conditions[k].unit === 'px') {\n\n                  if (!(element_scroll >= final_value)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n                // Min-scroll-y in %\n                else if (EQCSS.data[i].conditions[k].unit === '%') {\n\n                  var element_scroll_size = elements[j].scrollHeight;\n                  var element_size;\n\n                  if (elements[j] === document.documentElement || elements[j] === document.body) {\n\n                    element_size = window.innerHeight;\n\n                  } else {\n\n                    element_size = parseInt(computed_style.getPropertyValue('height'));\n\n                  }\n\n                  if (!((element_scroll / (element_scroll_size - element_size)) * 100 >= final_value)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n              break;\n\n              // Max-scroll-x\n              case 'max-scroll-x':\n\n                var element = elements[j];\n                element_scroll = elements[j].scrollLeft;\n\n                if (!element.hasScrollListener) {\n\n                  if (element === document.documentElement || element === document.body) {\n\n                    window.addEventListener('scroll', function() {\n\n                      EQCSS.throttle();\n                      element.hasScrollListener = true;\n\n                    })\n\n                  } else {\n\n                    element.addEventListener('scroll', function() {\n\n                      EQCSS.throttle();\n                      element.hasScrollListener = true;\n\n                    })\n\n                  }\n\n                }\n\n                // Max-scroll-x in px\n                if (recomputed === true || EQCSS.data[i].conditions[k].unit === 'px') {\n\n                  if (!(element_scroll <= final_value)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n                // Max-scroll-x in %\n                else if (EQCSS.data[i].conditions[k].unit === '%') {\n\n                  var element_scroll_size = elements[j].scrollWidth;\n                  var element_size;\n\n                  if (elements[j] === document.documentElement || elements[j] === document.body) {\n\n                    element_size = window.innerWidth;\n\n                  } else {\n\n                    element_size = parseInt(computed_style.getPropertyValue('width'));\n\n                  }\n\n                  if (!((element_scroll / (element_scroll_size - element_size)) * 100 <= final_value)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n              break;\n\n              // Max-scroll-y\n              case 'max-scroll-y':\n\n                var element = elements[j];\n                element_scroll = elements[j].scrollTop;\n\n                if (!element.hasScrollListener) {\n\n                  if (element === document.documentElement || element === document.body) {\n\n                    window.addEventListener('scroll', function() {\n\n                      EQCSS.throttle();\n                      element.hasScrollListener = true;\n\n                    })\n\n                  } else {\n\n                    element.addEventListener('scroll', function() {\n\n                      EQCSS.throttle();\n                      element.hasScrollListener = true;\n\n                    })\n\n                  }\n\n                }\n\n                // Max-scroll-y in px\n                if (recomputed === true || EQCSS.data[i].conditions[k].unit === 'px') {\n\n                  if (!(element_scroll <= final_value)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n                // Max-scroll-y in %\n                else if (EQCSS.data[i].conditions[k].unit === '%') {\n\n                  var element_scroll_size = elements[j].scrollHeight;\n                  var element_size;\n\n                  if (elements[j] === document.documentElement || elements[j] === document.body) {\n\n                    element_size = window.innerHeight;\n\n                  } else {\n\n                    element_size = parseInt(computed_style.getPropertyValue('height'));\n\n                  }\n\n                  if (!((element_scroll / (element_scroll_size - element_size)) * 100 <= final_value)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n              break;\n\n              // Min-characters\n              case 'min-characters':\n\n                // form inputs\n                if (elements[j].value) {\n\n                  if (!(elements[j].value.length >= final_value)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n                // blocks\n                else {\n\n                  if (!(elements[j].textContent.length >= final_value)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n              break;\n\n              // Max-characters\n              case 'max-characters':\n\n                // form inputs\n                if (elements[j].value) {\n\n                  if (!(elements[j].value.length <= final_value)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n                // blocks\n                else {\n\n                  if (!(elements[j].textContent.length <= final_value)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n              break;\n\n              // Min-children\n              case 'min-children':\n\n                if (!(elements[j].children.length >= final_value)) {\n\n                  test = false;\n                  break test_conditions;\n\n                }\n\n              break;\n\n              // Max-children\n              case 'max-children':\n\n                if (!(elements[j].children.length <= final_value)) {\n\n                  test = false;\n                  break test_conditions;\n\n                }\n\n              break;\n\n              // Min-lines\n              case 'min-lines':\n\n                element_height =\n                  parseInt(computed_style.getPropertyValue('height'))\n                  - parseInt(computed_style.getPropertyValue('border-top-width'))\n                  - parseInt(computed_style.getPropertyValue('border-bottom-width'))\n                  - parseInt(computed_style.getPropertyValue('padding-top'))\n                  - parseInt(computed_style.getPropertyValue('padding-bottom'));\n\n                element_line_height = parseInt(computed_style.getPropertyValue('line-height'));\n\n                if (!(element_height / element_line_height >= final_value)) {\n\n                  test = false;\n                  break test_conditions;\n\n                }\n\n              break;\n\n              // Max-lines\n              case 'max-lines':\n\n                element_height =\n                  parseInt(computed_style.getPropertyValue('height'))\n                  - parseInt(computed_style.getPropertyValue('border-top-width'))\n                  - parseInt(computed_style.getPropertyValue('border-bottom-width'))\n                  - parseInt(computed_style.getPropertyValue('padding-top'))\n                  - parseInt(computed_style.getPropertyValue('padding-bottom'));\n\n                element_line_height = parseInt(computed_style.getPropertyValue('line-height'));\n\n                if (!(element_height / element_line_height + 1 <= final_value)) {\n\n                  test = false;\n                  break test_conditions;\n\n                }\n\n              break;\n\n              // Orientation\n              case 'orientation':\n\n                // Square Orientation\n                if (EQCSS.data[i].conditions[k].value === 'square') {\n\n                  if (!(elements[j].offsetWidth === elements[j].offsetHeight)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n                // Portrait Orientation\n                if (EQCSS.data[i].conditions[k].value === 'portrait') {\n\n                  if (!(elements[j].offsetWidth < elements[j].offsetHeight)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n                // Landscape Orientation\n                if (EQCSS.data[i].conditions[k].value === 'landscape') {\n\n                  if (!(elements[j].offsetHeight < elements[j].offsetWidth)) {\n\n                    test = false;\n                    break test_conditions;\n\n                  }\n\n                }\n\n              break;\n\n              // Min-aspect-ratio\n              case 'min-aspect-ratio':\n\n                var el_width = EQCSS.data[i].conditions[k].value.split('/')[0];\n                var el_height = EQCSS.data[i].conditions[k].value.split('/')[1];\n\n                if (!(el_width/el_height <= elements[j].offsetWidth/elements[j].offsetHeight)) {\n\n                  test = false;\n                  break test_conditions;\n\n                }\n\n              break;\n\n              // Max-aspect-ratio\n              case 'max-aspect-ratio':\n\n                var el_width = EQCSS.data[i].conditions[k].value.split('/')[0];\n                var el_height = EQCSS.data[i].conditions[k].value.split('/')[1];\n\n                if (!(elements[j].offsetWidth/elements[j].offsetHeight <= el_width/el_height)) {\n\n                  test = false;\n                  break test_conditions;\n\n                }\n\n              break;\n\n            }\n          }\n\n          // Update CSS block:\n          // If all conditions are met: copy the CSS code from the query to the corresponding CSS block\n          if (test === true) {\n\n            // Get the CSS code to apply to the element\n            css_code = EQCSS.data[i].style;\n\n            // Replace eval('xyz') with the result of try{with(element){eval(xyz)}} in JS\n            css_code = css_code.replace(\n              /eval\\( *((\".*?\")|('.*?')) *\\)/g,\n              function(string, match) {\n\n                return EQCSS.tryWithEval(elements[j], match);\n\n              }\n            );\n\n            // Replace '$this' or 'eq_this' with '[element_guid]'\n            css_code = css_code.replace(/(\\$|eq_)this/gi, '[' + element_guid + ']');\n\n            // Replace '$parent' or 'eq_parent' with '[element_guid_parent]'\n            css_code = css_code.replace(/(\\$|eq_)parent/gi, '[' + element_guid_parent + ']');\n\n            // Replace '$prev' or 'eq_prev' with '[element_guid_prev]'\n            css_code = css_code.replace(/(\\$|eq_)prev/gi, '[' + element_guid_prev + ']');\n\n            // Replace '$next' or 'eq_next' with '[element_guid_next]'\n            css_code = css_code.replace(/(\\$|eq_)next/gi, '[' + element_guid_next + ']');\n\n            // Replace '$root' or 'eq_root' with html\n            css_code = css_code.replace(/(\\$|eq_)root/gi, 'html');\n\n            // Replace 'ew', 'eh', 'emin', and 'emax' units\n            css_code = css_code.replace(/(\\d*\\.?\\d+)(?:\\s*)(ew|eh|emin|emax)/gi, function(match, $1, $2) {\n\n              switch ($2) {\n\n                // Element width units\n                case 'ew':\n\n                  return elements[j].offsetWidth / 100 * $1 + 'px';\n\n                break;\n\n                // Element height units\n                case 'eh':\n\n                  return elements[j].offsetHeight / 100 * $1 + 'px';\n\n                break;\n\n                // Element min units\n                case 'emin':\n\n                  return Math.min(elements[j].offsetWidth, elements[j].offsetHeight) / 100 * $1 + 'px';\n\n                break;\n\n                // Element max units\n                case 'emax':\n\n                  return Math.max(elements[j].offsetWidth, elements[j].offsetHeight) / 100 * $1 + 'px';\n\n                break;\n\n              }\n\n            });\n\n            // good browsers\n            try {\n\n              css_block.innerHTML = css_code;\n\n            }\n\n            // IE8\n            catch(e) {\n\n              css_block.styleSheet.cssText = css_code;\n\n            }\n\n          }\n\n          // If condition is not met: empty the CSS block\n          else {\n\n            // Good browsers\n            try {\n\n              css_block.innerHTML = '';\n\n            }\n\n            // IE8\n            catch(e) {\n\n              css_block.styleSheet.cssText = '';\n\n            }\n\n          }\n\n        }\n\n      }\n\n    }\n\n\n    /*\n     * Eval('') and $it\n     * (…yes with() was necessary, and eval() too!)\n     */\n\n    EQCSS.tryWithEval = function(element, string) {\n\n      var $it = element;\n      var ret = '';\n\n      try {\n\n        with ($it) { ret = eval(string.slice(1, -1)) }\n\n      }\n\n      catch(e) {\n\n        ret = '';\n\n      }\n\n      return ret;\n\n    }\n\n\n    /*\n     * EQCSS.reset\n     * Deletes parsed queries removes EQCSS-generated tags and attributes\n     * To reload EQCSS again after running EQCSS.reset() use EQCSS.load()\n     */\n\n    EQCSS.reset = function() {\n\n      // Reset EQCSS.data, removing previously parsed queries\n      EQCSS.data = [];\n\n      // Remove EQCSS-generated style tags from head\n      var style_tag = document.querySelectorAll('head style[id^=\"data-eqcss-\"]');\n\n      for (var i = 0; i < style_tag.length; i++) {\n\n        style_tag[i].parentNode.removeChild(style_tag[i]);\n\n      }\n\n      // Remove EQCSS-generated attributes from all tags\n      var tag = document.querySelectorAll('*');\n\n      // For each tag in the document\n      for (var j = 0; j < tag.length; j++) {\n\n        // Loop through all attributes\n        for (var k = 0; k < tag[j].attributes.length; k++) {\n\n          // If an attribute begins with 'data-eqcss-'\n          if (tag[j].attributes[k].name.indexOf('data-eqcss-') === 0) {\n\n            // Remove the attribute from the tag\n            tag[j].removeAttribute(tag[j].attributes[k].name)\n\n          }\n\n        }\n\n      }\n\n      // TODO: remove EQCSS-generated event listeners\n      // 1) would we need to only attach named functions?\n      // 2) would we need to generate unique names and keep track?\n\n    }\n\n\n    /*\n     * 'DOM Ready' cross-browser polyfill / Diego Perini / MIT license\n     * Forked from: https://github.com/dperini/ContentLoaded/blob/master/src/contentloaded.js\n     */\n\n    EQCSS.domReady = function(fn) {\n\n      var done = false;\n      var top = true;\n      var doc = window.document;\n      var root = doc.documentElement;\n      var modern = !~navigator.userAgent.indexOf('MSIE 8');\n      var add = modern ? 'addEventListener' : 'attachEvent';\n      var rem = modern ? 'removeEventListener' : 'detachEvent';\n      var pre = modern ? '' : 'on';\n      var init = function(e) {\n\n        if (e.type === 'readystatechange' && doc.readyState !== 'complete') return;\n\n        (e.type === 'load' ? window : doc)[rem](pre + e.type, init, false);\n\n        if (!done && (done = true)) fn.call(window, e.type || e);\n\n      },\n      poll = function() {\n\n        try {\n\n          root.doScroll('left');\n\n        }\n\n        catch(e) {\n\n          setTimeout(poll, 50);\n          return;\n\n        }\n\n        init('poll');\n\n      };\n\n      if (doc.readyState === 'complete') fn.call(window, 'lazy');\n\n      else {\n\n        if (!modern && root.doScroll) {\n\n          try {\n\n            top = !window.frameElement;\n\n          }\n\n          catch(e) {}\n\n          if (top) poll();\n\n        }\n\n        doc[add](pre + 'DOMContentLoaded', init, false);\n        doc[add](pre + 'readystatechange', init, false);\n        window[add](pre + 'load', init, false);\n\n      }\n\n    }\n\n\n    /*\n     * EQCSS.throttle\n     * Ensures EQCSS.apply() is not called more than once every (EQCSS_timeout)ms\n     */\n\n    var EQCSS_throttle_available = true;\n    var EQCSS_throttle_queued = false;\n    var EQCSS_mouse_down = false;\n    var EQCSS_timeout = 200;\n\n    EQCSS.throttle = function() {\n\n      if (EQCSS_throttle_available) {\n\n        EQCSS.apply();\n        EQCSS_throttle_available = false;\n\n        setTimeout(function() {\n\n          EQCSS_throttle_available = true;\n\n          if (EQCSS_throttle_queued) {\n\n            EQCSS_throttle_queued = false;\n            EQCSS.apply();\n\n          }\n\n        }, EQCSS_timeout);\n\n      } else {\n\n        EQCSS_throttle_queued = true;\n\n      }\n\n    }\n\n    // Call load (and apply, indirectly) on page load\n    EQCSS.domReady(function() {\n\n      EQCSS.load();\n      EQCSS.throttle();\n\n    });\n\n    // On resize, scroll, input, click, mousedown + mousemove, call EQCSS.throttle.\n    window.addEventListener('resize', EQCSS.throttle);\n    window.addEventListener('input', EQCSS.throttle);\n    window.addEventListener('click', EQCSS.throttle);\n\n    window.addEventListener('mousedown', function(e) {\n\n      // If left button click\n      if (e.which === 1) {\n\n        EQCSS_mouse_down = true;\n\n      }\n\n    });\n\n    window.addEventListener('mousemove', function() {\n\n      if (EQCSS_mouse_down) {\n\n        EQCSS.throttle();\n\n      }\n\n    });\n\n    window.addEventListener('mouseup', function() {\n\n      EQCSS_mouse_down = false;\n      EQCSS.throttle();\n\n    });\n\n    //window.addEventListener('scroll', EQCSS.throttle);\n    // => to avoid annoying slowness, scroll events are only listened on elements that have a scroll EQ.\n\n\n    // Debug: here's a shortcut for console.log\n    function l(a) { console.log(a) }\n\n    return EQCSS;\n\n}));","/home/travis/build/npmtest/node-npmtest-eqcss/node_modules/eqcss/EQCSS-polyfills.js":"/*\n\n#  EQCSS IE8 Polyfills\n## version 1.6.0\n\nThis file contains optional polyfills to provide:\nIE8 support to the EQCSS.js plugin\n\n- github.com/eqcss/eqcss\n- elementqueries.com\n\nAuthors: Tommy Hodgins, Maxime Euzière\n\nLicense: MIT\n\n*/\n\n/*\n * addEventListener polyfill 1.0 / Eirik Backer / MIT Licence\n * Forked from http://css-tricks.com/snippets/javascript/addeventlistner-polyfill/\n * Adds the native DOM2 function addEventListener on IE6 - 8.\n */\n\n(function (win, doc) {\n\n  // If the function already exists, no need to polyfill\n  if (win.addEventListener) return;\n\n  function docHijack(p) {\n    var old = doc[p];\n    doc[p] = function (v) {\n      return addListen(old(v))\n    }\n  }\n  function addEvent(on, fn, self) {\n    return (self = this).attachEvent('on' + on, function(e) {\n      var e = e || win.event;\n      e.preventDefault  = e.preventDefault  || function(){e.returnValue = false}\n      e.stopPropagation = e.stopPropagation || function(){e.cancelBubble = true}\n      try {\n        fn.call(self, e);\n      }\n      catch (e) {}\n    });\n  }\n  function addListen(obj, i) {\n    if (i = obj.length) while (i--) obj[i].addEventListener = addEvent;\n    else obj.addEventListener = addEvent;\n    return obj;\n  }\n  addListen([doc, win]);\n  if ('Element' in win) win.Element.prototype.addEventListener = addEvent;      // IE8\n  else{                                                                       // IE < 8\n    doc.attachEvent('onreadystatechange', function(){addListen(doc.all)});    // Make sure we also init at domReady\n    docHijack('getElementsByTagName');\n    docHijack('getElementById');\n    docHijack('createElement');\n    addListen(doc.all);\n  }\n})(window, document);\n\n/*\n * getComputedStyle and getPropertyValue polyfill / Jonathan Neal / License CC0\n * Forked from: https://github.com/Financial-Times/polyfill-service/tree/master/polyfills/getComputedStyle\n * Allows to measure a CSS property of any element on IE6-8.\n * Dimensions (width, height...) are converted and returned in pixels, like modern browsers do.\n */\n\n(function(win) {\n\n  // If the function already exists, no need to polyfill\n  if (win.getComputedStyle) return;\n\n  function getComputedStylePixel(element, property, fontSize) {\n    // Internet Explorer sometimes struggles to read currentStyle until the element's document is accessed.\n    var value = element.document && element.currentStyle[property].match(/([\\d\\.]+)(%|cm|em|in|mm|pc|pt|)/) || [0, 0, ''],\n        size = value[1],\n        suffix = value[2],\n        rootSize;\n\n    fontSize = !fontSize ? fontSize : /%|em/.test(suffix) && element.parentElement ? getComputedStylePixel(element.parentElement, 'fontSize', null) : 16;\n    rootSize = property == 'fontSize' ? fontSize : /width/i.test(property) ? element.clientWidth : element.clientHeight;\n\n    return suffix == '%' ? size / 100 * rootSize :\n           suffix == 'cm' ? size * 0.3937 * 96 :\n           suffix == 'em' ? size * fontSize :\n           suffix == 'in' ? size * 96 :\n           suffix == 'mm' ? size * 0.3937 * 96 / 10 :\n           suffix == 'pc' ? size * 12 * 96 / 72 :\n           suffix == 'pt' ? size * 96 / 72 :\n           size;\n  }\n\n  function setShortStyleProperty(style, property) {\n    var borderSuffix = property == 'border' ? 'Width' : '',\n        t = property + 'Top' + borderSuffix,\n        r = property + 'Right' + borderSuffix,\n        b = property + 'Bottom' + borderSuffix,\n        l = property + 'Left' + borderSuffix;\n\n    style[property] = (style[t] == style[r] && style[t] == style[b] && style[t] == style[l] ? [ style[t] ] :\n                       style[t] == style[b] && style[l] == style[r] ? [ style[t], style[r] ] :\n                       style[l] == style[r] ? [ style[t], style[r], style[b] ] :\n                       [ style[t], style[r], style[b], style[l] ]).join(' ');\n  }\n\n  // <CSSStyleDeclaration>\n  function CSSStyleDeclaration(element) {\n    var style = this,\n        currentStyle = element.currentStyle,\n        fontSize = getComputedStylePixel(element, 'fontSize'),\n        unCamelCase = function (match) {\n          return '-' + match.toLowerCase();\n        },\n        property;\n\n    for (property in currentStyle) {\n      Array.prototype.push.call(style, property == 'styleFloat' ? 'float' : property.replace(/[A-Z]/, unCamelCase));\n\n      if (property == 'width') {\n        style[property] = element.offsetWidth + 'px';\n      } else if (property == 'height') {\n        style[property] = element.offsetHeight + 'px';\n      } else if (property == 'styleFloat') {\n        style.float = currentStyle[property];\n      } else if (/margin.|padding.|border.+W/.test(property) && style[property] != 'auto') {\n        style[property] = Math.round(getComputedStylePixel(element, property, fontSize)) + 'px';\n      } else if (/^outline/.test(property)) {\n\n        // errors on checking outline\n        try {\n          style[property] = currentStyle[property];\n        } catch (error) {\n          style.outlineColor = currentStyle.color;\n          style.outlineStyle = style.outlineStyle || 'none';\n          style.outlineWidth = style.outlineWidth || '0px';\n          style.outline = [style.outlineColor, style.outlineWidth, style.outlineStyle].join(' ');\n        }\n      } else {\n        style[property] = currentStyle[property];\n      }\n    }\n\n    setShortStyleProperty(style, 'margin');\n    setShortStyleProperty(style, 'padding');\n    setShortStyleProperty(style, 'border');\n\n    style.fontSize = Math.round(fontSize) + 'px';\n  }\n\n  CSSStyleDeclaration.prototype = {\n    constructor: CSSStyleDeclaration,\n\n    // <CSSStyleDeclaration>.getPropertyPriority\n    getPropertyPriority: function () {\n      throw new Error('NotSupportedError: DOM Exception 9');\n    },\n\n    // <CSSStyleDeclaration>.getPropertyValue\n    getPropertyValue: function (property) {\n      return this[property.replace(/-\\w/g, function (match) {\n        return match[1].toUpperCase();\n      })];\n    },\n\n    // <CSSStyleDeclaration>.item\n    item: function (index) {\n      return this[index];\n    },\n\n    // <CSSStyleDeclaration>.removeProperty\n    removeProperty: function () {\n      throw new Error('NoModificationAllowedError: DOM Exception 7');\n    },\n\n    // <CSSStyleDeclaration>.setProperty\n    setProperty: function () {\n      throw new Error('NoModificationAllowedError: DOM Exception 7');\n    },\n\n    // <CSSStyleDeclaration>.getPropertyCSSValue\n    getPropertyCSSValue: function () {\n      throw new Error('NotSupportedError: DOM Exception 9');\n    }\n  };\n\n  // <win>.getComputedStyle\n  win.getComputedStyle = function getComputedStyle(element) {\n    return new CSSStyleDeclaration(element);\n  };\n})(window);\n\n/*\n * document.querySelector and querySelectorAll polyfill / Maxime Euzière / public domain\n * Forked from: http://xem.github.io/Lazy/\n * Adds basic DOM selection on IE6-8 (selection by tag, class or id only)\n */\n\n(function(doc) {\n  if (doc.querySelectorAll) return;\n\n  doc.querySelectorAll = function(a) {\n    if (\"#\" == a.charAt(0)) return [doc.getElementById(a.substr(1))];\n    if (\".\" == a.charAt(0)) return doc.getElementsByClassName(a.substr(1));\n    return doc.getElementsByTagName(a);\n  }\n\n  doc.querySelector = function(a) {\n    return querySelectorAll(a)[0];\n  }\n})(document);\n\n/*\n * textContent polyfill / Eli Grey / cc-by-nc 3.0 license\n * Forked from http://eligrey.com/blog/post/textcontent-in-ie8/\n * Adds textContent property to DOM elements in IE8\n */\n\n(function() {\n  if (Object.defineProperty\n  && Object.getOwnPropertyDescriptor\n  && Object.getOwnPropertyDescriptor(Element.prototype, \"textContent\")\n  && !Object.getOwnPropertyDescriptor(Element.prototype, \"textContent\").get) {\n    var innerText = Object.getOwnPropertyDescriptor(Element.prototype, \"innerText\");\n    Object.defineProperty(Element.prototype, \"textContent\", {\n      get: function() {\n        return innerText.get.call(this)\n      },\n      set: function(x) {\n        return innerText.set.call(this, x)\n      }\n    });\n  }\n})();"}